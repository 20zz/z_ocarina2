/*
 * $Id: z_n64dd_keeptable.decl,v 1.1.1.1 2003/03/10 22:42:47 tong Exp $
 *
 *
 * $Log: z_n64dd_keeptable.decl,v $
 * Revision 1.1.1.1  2003/03/10 22:42:47  tong
 * new OBJ tree for ocarina from Nintendo
 *
 * Revision 2.3  2001-04-04 16:21:47+09  zelda
 * ドルフィンエミュレータ用仮ぐみ版 CICと64DD対応部分をはずしたバージョン
 *
 * Revision 2.2  1998-10-29 18:27:51+09  zelda
 * dmacopy_fg/bgのマクロをundefすることにより弊害が起こっていたのにとりあえず対処
 *
 * Revision 2.1  1998-10-22 21:17:25+09  zelda
 * ＲＯＭ出しバージョン(NTSC)
 *
 * Revision 1.10  1998/10/03 04:52:46  hayakawa
 * *** empty log message ***
 *
 * Revision 1.9  1998-10-02 21:14:45+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.8  1998-10-01 22:54:07+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.7  1998-09-30 21:00:10+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.6  1998-09-30 17:43:27+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.5  1998-09-29 21:57:57+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.4  1998-09-29 20:29:39+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.3  1998-09-28 17:14:05+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.2  1998-09-26 16:38:39+09  hayakawa
 * *** empty log message ***
 *
 * Revision 1.1  1998-09-24 23:15:04+09  hayakawa
 * Initial revision
 *
 */

decl( void, dmacopy_disk, (void *dst, u32 src, u32 size))
decl2( Game_play, game_play )
decl2( Debug_mode, debug_mode )

/* fault.c より */
decl(void, fault_RemoveClient, (fault_client_t *c))
decl(void, fault_AddClient, (fault_client_t *c, void (*callback)(void *, void *), void *arg1, void *arg2))
decl(void, faultprint_PosPrintf, (int posx, int posy, const char *format, ...))
decl(void, fault_KeyWait, (void))
decl(void, fault_HungUpMsg, (const char *msg1, const char *msg2))
decl(void, fault_HungUp, (const char *srcfile, int line))

decl( void *, _is_printf_s, (void *, const char *, int))
decl( int, _Printf, (void *(*)(void *, const char *, int), char *, const char *, va_list))

/* os.h より */
decl( void, osCreateThread, (OSThread *, OSId, void (*)(void *), void *, void *, OSPri))
decl( void, osDestroyThread, (OSThread *))
decl( void, osYieldThread, (void))
decl( void, osStartThread, (OSThread *))
decl( void, osStopThread, (OSThread *))
decl( OSId, osGetThreadId, (OSThread *))
decl( void, osSetThreadPri, (OSThread *, OSPri))
decl( OSPri, osGetThreadPri, (OSThread *))
decl( void, osCreateMesgQueue, (OSMesgQueue *, OSMesg *, s32))
decl( s32, osSendMesg, (OSMesgQueue *, OSMesg, s32))
decl( s32, osJamMesg, (OSMesgQueue *, OSMesg, s32))
decl( s32, osRecvMesg, (OSMesgQueue *, OSMesg *, s32))
decl( void, osSetEventMesg, (OSEvent, OSMesgQueue *, OSMesg))
decl( OSIntMask, osGetIntMask, (void))
decl( OSIntMask, osSetIntMask, (OSIntMask))
decl( void, osInvalDCache, (void *, s32))
decl( void, osInvalICache, (void *, s32))
decl( void, osWritebackDCache, (void *, s32))
decl( void, osWritebackDCacheAll, (void))
decl( OSTime, osGetTime, (void))
decl( void, osSetTime, (OSTime))
decl( int, osSetTimer, (OSTimer *, OSTime, OSTime, OSMesgQueue *, OSMesg))
decl( int, osStopTimer, (OSTimer *))

decl(z_common_data_t, z_common_data, )
/*
* 追加分
*/
/* z_std_dma.c */
#undef    dmacopy_bg
decl(int, dmacopy_bg, ( dma_t *dmap, void *dst, u32 src, u32 size, void *work, OSMesgQueue *mq, OSMesg m ) )
#undef    dmacopy_fg
decl(int, dmacopy_fg, ( void *dst, u32 src, u32 size ) )
decl(void, dmacopy_ddrom_fg, (void *dst, u32 src, u32 size))
//decl(int, __dmacopy_bg, ( dma_t *dmap, void *dst, u32 src, u32 size, void *work, OSMesgQueue *mq, OSMesg m, char *file, u32 line))
//decl(int, __dmacopy_fg, (void *dst, u32 src, u32 size, char *file, u32 line))
/* z_n64dd.c */
//decl(void, dmacopy_disk, (void *dst, u32 src, u32 size))
/* os.h */
decl(void, SpotShowKansi, (Game_play *game_play))
decl(unsigned long, SegmentBaseAddress, [NUM_SEGMENTS])
decl0()
/* z_common.c */
decl(int, event_check, (int no))
decl(void, event_set, (int no))
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()
decl0()

/* undef した マクロを復活させる */
#ifdef _Z_STD_DMA_H_
#ifdef DMA_DEBUG_MODE
#ifndef _Z_STD_DMA_C_
#define dmacopy_bg( dmap, dst, src, size, work, mq, m ) \
      __dmacopy_bg( dmap, dst, src, size, work, mq, m, __FILE__, __LINE__ )
#define dmacopy_fg( dst, src, size) \
      __dmacopy_fg( dst, src, size, __FILE__, __LINE__ )
#endif /* _Z_STD_DMA_C_ */
#endif /* DMA_DEBUG_MODE */
#endif /* _Z_STD_DMA_H_ */
